scalar LocalDateTime
#scalar Long

type Query {
    getUserById(id: ID!): User
    getAllUsers(from: Int = 0, size: Int = 10): [User]
    getItemById(id: ID!): OutputItemDto
    getUserItems(from: Int = 0, size: Int = 10): [OutputItemDto]
    searchItem(searchRequest: String, from: Int = 0, size: Int = 10): [Item]
    getItemRequestById(requestId: Int): ItemRequest
    getUserItemRequests: [ItemRequest]
    getOthersItemRequests(from: Int = 0, size: Int = 10): [ItemRequest]
    getBookingById(bookingId: Int): Booking
    getUserBookingsByState(state: BookingState = ALL, from: Int = 0, size: Int = 10): [Booking]
    getUserItemsBookingsByState(state: BookingState = ALL, from: Int = 0, size: Int = 10): [Booking]
}

type Mutation {
    createUser(user: UserDto): User
    updateUser(id: ID!, user: UserDto): User
    deleteUserById(id: ID!): Boolean
    createItem(itemDto: ItemDto): Item
    updateItem(itemId: Int!, itemDto: ItemDto!): Item
    deleteItemById(itemId: ID!): Boolean
    createComment(commentDto: CommentDto, itemId: Int): Comment
    createItemRequest(itemRequestDto: ItemRequestDto): ItemRequest
    createBooking(bookingDto: BookingDto): Booking
    approveBooking(bookingId: Int, approved: Boolean): Booking
}

type User {
    id: ID,
    name: String
    email: String
}

input UserDto {
    name: String
    email: String
}

input ItemDto {
    name: String!
    description: String!
    available: Boolean!
    requestId: Int
}

type Item {
    id: ID
    name: String,
    description: String
    available: Boolean
    owner: User
    request: ItemRequest
}

input CommentDto {
    text: String!
}

type Comment {
    id: ID
    text: String
    item: Item
    author: User
    created: LocalDateTime
}

input ItemRequestDto {
    description: String!
}

type ItemRequest {
    id: ID!
    description: String
    requester: User
    created: LocalDateTime
    items: [OutputItemDto]
}

#type ItemRequestDto {
#    id: ID
#    description: String
#    created: LocalDateTime
#    items: [OutputItemDto]
#}

type OutputItemDto {
    id: ID
    name: String
    description: String
    available: Boolean
    lastBooking: Booking
    nextBooking: Booking
    comments: [Comment]
    requestId: Int
}

input BookingDto {
    itemId: Int!
    start: LocalDateTime!
    end: LocalDateTime!
}

enum BookingStatus{
    WAITING
    APPROVED
    REJECTED
    CANCELED
}

enum BookingState {
    ALL
    CURRENT
    PAST
    FUTURE
    WAITING
    REJECTED
}

type Booking {
    id: ID
    start: LocalDateTime
    end: LocalDateTime
    item: Item
    booker: User
    status: BookingStatus
}